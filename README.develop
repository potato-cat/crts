DEVELOPER NOTES:

WebRTC google talk
https://www.youtube.com/watch?v=p2HzZkd2A40





notes on CRTSFilter



class CRTSFilter
{
    public:

        CRTSFilter(int argc, const char **argv);
        ~CRTSFilter(void);

        // We have a start() and stop() so we can reconfigure and restart
        // the streams/graphs.
        //
        // GNUradio cannot restart the flow without stopping the process
        // and re-running the process.  There is no Block start and start.
        // eg: if we ran the star ship reactor core and drive system with
        // this code, and the reactor core was started in the constructor
        // of a Block (Filter), we have to shutdown the reactor core any
        // time we needed to move a conduit.  But with a start and stop
        // used to stop and start the flow, we do not have to shutdown the
        // reactor core to move a conduit.
        //
        void start(uint32_t numInChannels, uint32_t numOutChannels) = 0;
        void stop(uint32_t numInChannels, uint32_t numOutChannels) = 0;
        void write(void *buffer, size_t bufferLen, uint32_t inChannelNum) = 0;
};



class MyFilter : public CRTSFilter
{
    public:

        MyFilter(int argc, const char **argv);
        ~MyFilter(void);

        void start(uint32_t numInChannels, uint32_t numOutChannels);
        void stop(uint32_t numInChannels, uint32_t numOutChannels);
        void write(void *buffer, size_t bufferLen, uint32_t inChannelNum);
};











Classes internal to program crts_radio:


   Thread

         static global thread barrier
         static mainThread


     each Thread

         is a list of FilterModule


  FilterModule

         container for CRTSFilter

         FilterModule::write()

              1) if not different thread calls CRTSFilter::write()
    
            or

              2) or signals cond to thread to call CRTSFilter::write()
                 or blocks and ... if the queue is full


  Stream

         static factory of Stream
         static mutex
         static cond

    each Stream

         atomic bool isRunning

         is a factory of FilterModule

            load()   - create a FilterModule for a stream
            unload() - delete a FilterModule from a stream

         is a factory of Thread

             createThread()

             destroyThread()

         is a list of Thread



How does GNUradio work:  After reading this I see that we are doing many
of the same things as GNU radio, but we have some things that are much
more efficient than GNU radio:

    https://www.gnuradio.org/blog/buffers/




Tests:



cat /dev/urandom | hexdump  | dd count=100 > xxx1
cat /dev/urandom | hexdump  | dd count=100 > xxx2

while ./crts_radio\
 -l sleepTest\
 -f fileIn [ --file xxx1 ]\
 -f fileIn [ --file xxx2 ]\
 -f sleepTest -f sleepTest\
 -f stdout\
 -t 0 -t 1 -t 3 -t 4\
 -c 0 2 1 3 2 4 3 4\
 > xxxx ;\
 do echo -e "\n\nSuccess\n\n" ;\
 sleep 1 ; done


./crts_radio -l sleepTest\
 -f sourceFeed\
 -f fileIn [ --file xxx1 ]\
 -f fileIn [ --file xxx2 ]\
 -f sleepTest\
 -f sleepTest\
 -f stdout\
 -c 0 1 0 2 1 3 2 4 3 5 4 5\
 -d -e

 # or with a single thread running all
while ./crts_radio -l sleepTest\
 -f sourceFeed\
 -f fileIn [ --file xxx1 ]\
 -f fileIn [ --file xxx2 ]\
 -f sleepTest\
 -f sleepTest\
 -f stdout\
 -c 0 1 0 2 1 3 2 4 3 5 4 5\
  > xxxx ; do \
  echo -e "\n\nSuccess\n\n" ; sleep 1 ; done


 rm xxx*


## Ports

Currently developing on: 
  - Debian GNU/Linux 9.3 (stretch)
  - Debian GNU/Linux 8.10 (jessie)
  - Ubuntu 16.04

## Dependencies

WARNING: At this point this is just developer notes.  This is all in flux.

Uninstalling libuhd-dev shows:

The following packages were automatically installed and are no longer required:
  fonts-lyx gnuradio gnuradio-dev libcodec2-0.4 libcomedi0 libcppunit-1.13-0v5 libcppunit-dev libglade2-0 libgnuradio-analog3.7.10 libgnuradio-atsc3.7.10
  libgnuradio-audio3.7.10 libgnuradio-blocks3.7.10 libgnuradio-channels3.7.10 libgnuradio-comedi3.7.10 libgnuradio-digital3.7.10 libgnuradio-dtv3.7.10
  libgnuradio-fcd3.7.10 libgnuradio-fec3.7.10 libgnuradio-fft3.7.10 libgnuradio-filter3.7.10 libgnuradio-noaa3.7.10 libgnuradio-pager3.7.10
  libgnuradio-pmt3.7.10 libgnuradio-qtgui3.7.10 libgnuradio-runtime3.7.10 libgnuradio-trellis3.7.10 libgnuradio-uhd3.7.10 libgnuradio-video-sdl3.7.10
  libgnuradio-vocoder3.7.10 libgnuradio-wavelet3.7.10 libgnuradio-wxgui3.7.10 libgnuradio-zeromq3.7.10 libgsl2 libjs-jquery-ui liblog4cpp5-dev liblog4cpp5v5
  libqt4-declarative libqt4-scripttools libqt4-test libqtassistantclient4 libqwt5-qt4 librtlsdr0 libuhd003 libvolk1-bin libvolk1-dev libvolk1.3 python-bs4
  python-cheetah python-cycler python-dateutil python-decorator python-functools32 python-glade2 python-html5lib python-imaging python-lxml
  python-matplotlib python-matplotlib-data python-networkx python-opengl python-pygraphviz python-pyparsing python-qt4 python-qwt5-qt4 python-scipy
  python-sip python-subprocess32 python-tz python-webencodings python-wxgtk3.0 python-wxversion python-yaml python-zmq rtl-sdr uhd-host


## Installing from git clone source

In the top source directory run

```
./bootstrap
```
which will download the file quickbuild.make.

Then edit the file Devel_Configure, making sure you set
PREFIX (the installation prefix) to the directory that you
would like, and then run it:
```
./Devel_Configure
```
which will generate the one file config.make.

Then run
```
make download
```
which will download the liquid-dsp and libfec package tarballs.
At this point you have all the needed files "non-system installed"
files.  So ya, no more downloads unless you need to install a
system dependency.

Then run
```
make
```
and then run
```
make install
```

You could run all these commands in one line, but things can
happen, like not having a dependency install, or a server
is not serving a downloaded file.


## Tests

```
cd interactiveTests
```

and look at and run test programs in that directory.


###################################################################################

Tue May 29 11:30:06 EDT 2018

This may not be the least number of packages required.

# on a ubuntu Mate system  16.04

dpkg --add-architecture i386

apt-get install\
 build-essential\
 libreadline-dev\
 graphviz\
 imagemagick\
 joystick\
 doxygen\
 dia\
 libgtk-3-dev\
 gcc-multilib\
 libgnutls30\
 csh\
 libstdc++6:i386\
 libgcc1:i386\
 zlib1g:i386\
 libncurses5:i386\
 vim-gtk\
 libgtk2.0-dev\
 libgtk2.0-doc\
 libgtk-3-dev\
 libgtk-3-doc\
 devhelp\
 sox\
 at\
 imagemagick-doc\
 imagemagick\
 graphviz-dev\
 curl\
 pkgconf\
 autoconf\
 libtool\
 automake\
 locate\
 libgnutls28-dev\
 libboost-all-dev\
 python-mako\
 libqt4-dev\
 qt4-dev-tools\
 libqwt5-qt4-dev\
 swig\
 libfftw3-dev\
 texlive\
 cmake\
 python-bs4\
 python-cheetah\
 python-cycler\
 python-dateutil\
 python-decorator\
 python-functools32\
 python-glade2\
 python-html5lib\
 python-imaging\
 python-lxml\
 python-matplotlib\
 python-matplotlib-data\
 python-networkx\
 python-opengl\
 python-pygraphviz\
 python-pyparsing\
 python-qt4\
 python-qwt5-qt4\
 python-scipy\
 python-sip\
 python-subprocess32\
 python-tz\
 python-wxgtk3.0\
 python-wxversion\
 python-yaml\
 python-zmq\
 python-weblib\
 git
 

 
